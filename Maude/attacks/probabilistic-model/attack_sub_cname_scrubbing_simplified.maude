load ../../src/probabilistic-model/dns
load ../../src/probabilistic-model/sampler
load ../../src/probabilistic-model/properties

--- This is the initial configuration corresponding to the scenario from attack validation on real
--- implementations for the "Subqueries + CNAME + scrubbing" attack.

mod TEST is
  inc SAMPLER + APMAUDE + DNS + PROPERTIES .

  eq rsvTimeout? = false .
  eq rsvTimeout = 1000.0 .

  --- eq maxFetch? = true .
  eq maxFetchParam = 6 .
  eq configWorkBudget = 5000 .

  --- enable CNAME scrubbing
  eq rsvMinCacheCredClient = 5 .
  eq rsvMinCacheCredResolver = 5 .

  op testTTL : -> Float .
  eq testTTL = 3600.0 .

  op q : -> Query .
  eq q = query(1, 'a1 . 'target-ans . 'com . root, a) .
  ---query(1, 'del . 'intermediary . 'com . root, a) .

  ops mAddr cAddr rAddr : -> Address .

  --- "SBELT": fallback if there are no known name servers
  op sb : -> ZoneState .
  eq sb = < root ('a . 'root-servers . 'net . root |-> addrRoot) > .

  op cache : -> Cache .
  eq cache =
    cacheEntry(< 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >, 1)
    cacheEntry(< 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >, 1).

  ops addrRoot addrNScom addrNStargetANS : -> Address .

  ops zoneRoot zoneCom zoneTargetANS : -> List{Record} .
  eq zoneRoot =
    --- authoritative data
    < root, soa, testTTL, soaData(testTTL) > --- dummy value
    < root, ns, testTTL, 'a . 'root-servers . 'net . root >

    --- non-authoritative data
    < 'a . 'root-servers . 'net . root, a, testTTL, addrRoot >
    < 'com . root, ns, testTTL, 'ns . 'com . root >
    < 'ns . 'com . root, a, testTTL, addrNScom > . --- glue

  eq zoneCom =
    --- authoritative data
    < 'com . root, soa, testTTL, soaData(testTTL) >
    < 'com . root, ns, testTTL, 'ns . 'com . 'root >
    < 'ns . 'com . root, a, testTTL, addrNScom >

    --- non-authoritative data
    < 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
    < 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS > . --- glue

  eq zoneTargetANS =
    --- authoritative data
    < 'target-ans . 'com . root, soa, testTTL, soaData(testTTL) >
    < 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
    < 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >

    < 'a1 . 'target-ans . 'com . root, cname, testTTL, 'b1 . 'target-ans . 'com . root >
    < 'b1 . 'target-ans . 'com . root, cname, testTTL, 'c1 . 'target-ans . 'com . root >
    < 'c1 . 'target-ans . 'com . root, cname, testTTL, 'd1 . 'target-ans . 'com . root >
    < 'd1 . 'target-ans . 'com . root, cname, testTTL, 'e1 . 'target-ans . 'com . root >
    < 'e1 . 'target-ans . 'com . root, cname, testTTL, 'f1 . 'target-ans . 'com . root >
    < 'f1 . 'target-ans . 'com . root, cname, testTTL, 'g1 . 'target-ans . 'com . root >
    < 'g1 . 'target-ans . 'com . root, cname, testTTL, 'h1 . 'target-ans . 'com . root >
    < 'h1 . 'target-ans . 'com . root, cname, testTTL, 'i1 . 'target-ans . 'com . root >
    < 'i1 . 'target-ans . 'com . root, cname, testTTL, 'j1 . 'target-ans . 'com . root >
    < 'j1 . 'target-ans . 'com . root, cname, testTTL, 'k1 . 'target-ans . 'com . root >
    < 'k1 . 'target-ans . 'com . root, cname, testTTL, 'l1 . 'target-ans . 'com . root >
    < 'l1 . 'target-ans . 'com . root, cname, testTTL, 'm1 . 'target-ans . 'com . root >
    < 'm1 . 'target-ans . 'com . root, cname, testTTL, 'n1 . 'target-ans . 'com . root >
    < 'n1 . 'target-ans . 'com . root, cname, testTTL, 'o1 . 'target-ans . 'com . root >
    < 'o1 . 'target-ans . 'com . root, cname, testTTL, 'p1 . 'target-ans . 'com . root >
    < 'p1 . 'target-ans . 'com . root, cname, testTTL, 'q1 . 'target-ans . 'com . root >

    .


  op initConfig : -> Config .
  eq initConfig = run(initState, limit) .

  eq initState = { 0.0 | nil }
    --- Preliminaries
    initMonitor(mAddr)
    [id, to cAddr : start, 0]

    < cAddr : Client | queries: q, resolver: rAddr, notifyDone: nullAddr >
    < rAddr : Resolver | cache: cache, --- assuming the name servers of target-ans.com and intermediary.com are cached
                         nxdomainCache: nilNxdomainCache,
                         nodataCache: nilNodataCache,
                         sbelt: sb,
                         workBudget: emptyIN,
                         blockedQueries: eptQSS,
                         sentQueries: eptQSS >

    --- Root name server
    < addrRoot : Nameserver | db: zoneRoot, queue: nilQueue >
    --- .com authoritative name server
    < addrNScom : Nameserver | db: zoneCom, queue: nilQueue >
    --- target-ans.com authoritative name server
    < addrNStargetANS : Nameserver | db: zoneTargetANS, queue: nilQueue > .

endm

--- uncomment for debugging purposes
--- set trace on .

set trace condition off . --- This does not seem to work
set trace whole off .
set trace substitution off .
set trace mb off .
set trace eq off .
set trace rl on . --- on
set trace select off .
set trace rewrite off .
set trace body off .
set trace builtin off .

rew initConfig .

rew msgAmpFactor(cAddr, addrNStargetANS ; addrNScom, initConfig) .
rew msgAmpFactor(cAddr, addrNStargetANS, initConfig) .
rew numActorMsgsRecvd(addrNStargetANS, initConfig) .
