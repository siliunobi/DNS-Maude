load ../../src/nondet-model/dns
load ../../src/nondet-model/properties

--- This is an example of a cyclic NS dependency involving three domains.

mod TEST is
  inc DNS + PROPERTIES .

  eq monitorSlistArgsLog? = true .
  eq configTsuNAMEslistCircDep = true . --- enable TsuNAME-like resolver behavior

  op testTTL : -> Float .
  eq testTTL = 3600.0 . --- Note that this is in time units, not seconds

  op q : -> Query .
  eq q = query(1, 'www . 'domainA . 'nz . root, a) .

  ops mAddr cAddr rAddr : -> Address .

  --- "SBELT": fallback if there are no known name servers
  op sb : -> ZoneState .
  eq sb = < root ('a . 'root-servers . 'net . root |-> addrRoot) > .

  ops addrRoot addrNSnz addrNSa addrNSb addrNSc : -> Address .

  ops zoneRoot zoneNZ zoneDomainA zoneDomainB zoneDomainC : -> List{Record} .
  eq zoneRoot =
    --- authoritative data
    < root, soa, testTTL, soaData(testTTL) > --- dummy value
    < root, ns, testTTL, 'a . 'root-servers . 'net . root >
    < 'a . 'root-servers . 'net . root, a, testTTL, addrRoot > --- actually, not authoritative, but unimportant for this example

    --- non-authoritative data
    < 'nz . root, ns, testTTL, 'ns . 'nz . root >
    < 'ns . 'nz . root, a, testTTL, addrNSnz > . --- glue

  eq zoneNZ =
    --- authoritative data
    < 'nz . root, soa, testTTL, soaData(testTTL) >
    < 'nz . root, ns, testTTL, 'ns . 'nz . 'root >
    < 'ns . 'nz . root, a, testTTL, addrNSnz >

    --- non-authoritative data
    < 'domainA . 'nz . root, ns, testTTL, 'ns . 'domainB . 'nz . root > --- in-bailiwick sibling domain, i.e., glue is optional
    < 'domainB . 'nz . root, ns, testTTL, 'ns . 'domainC . 'nz . root > --- in-bailiwick sibling domain, i.e., glue is optional
    < 'domainC . 'nz . root, ns, testTTL, 'ns . 'domainA . 'nz . root > . --- in-bailiwick sibling domain, i.e., glue is optional

  eq zoneDomainA =
    --- authoritative data
    < 'domainA . 'nz . root, soa, testTTL, soaData(testTTL) >
    < 'domainA . 'nz . root, ns, testTTL, 'ns . 'domainB . 'nz . root > . --- out-of-bailiwick, i.e., no glue allowed

  eq zoneDomainB =
    --- authoritative data
    < 'domainB . 'nz . root, soa, testTTL, soaData(testTTL) >
    < 'domainB . 'nz . root, ns, testTTL, 'ns . 'domainC . 'nz . root > . --- out-of-bailiwick, i.e., no glue allowed

  eq zoneDomainC =
    --- authoritative data
    < 'domainC . 'nz . root, soa, testTTL, soaData(testTTL) >
    < 'domainC . 'nz . root, ns, testTTL, 'ns . 'domainA . 'nz . root > . --- out-of-bailiwick, i.e., no glue allowed

  op initConfig : -> Config .
  eq initConfig =
    --- Preliminaries
    initMonitor(mAddr)
    (to cAddr : start)

    < cAddr : Client | queries: q, resolver: rAddr, notifyDone: nullAddr >
    < rAddr : Resolver | cache: nilCache,
                         nxdomainCache: nilNxdomainCache,
                         nodataCache: nilNodataCache,
                         sbelt: sb,
                         workBudget: emptyIN,
                         blockedQueries: eptQSS,
                         sentQueries: eptQSS >

    --- Root name server
    < addrRoot : Nameserver | db: zoneRoot, queue: nilQueue >
    --- .nz authoritative name server
    < addrNSnz : Nameserver | db: zoneNZ, queue: nilQueue >
    --- SLD name servers
    < addrNSa : Nameserver | db: zoneDomainC, queue: nilQueue >
    < addrNSb : Nameserver | db: zoneDomainA, queue: nilQueue >
    < addrNSc : Nameserver | db: zoneDomainB, queue: nilQueue > .

endm

--- uncomment for debugging purposes
--- set trace on .

set trace condition off . --- This does not seem to work
set trace whole off .
set trace substitution off .
set trace mb off .
set trace eq off .
set trace rl on . --- on
set trace select off .
set trace rewrite off .
set trace body off .
set trace builtin off .

rew initConfig .
rew msgAmpFactorTerminal(cAddr ; addrNSa ; addrNSb ; addrNSc, addrNSnz, initConfig) .

search [1] initConfig =>* C:Config such that hasCircularDependency(C:Config) .
