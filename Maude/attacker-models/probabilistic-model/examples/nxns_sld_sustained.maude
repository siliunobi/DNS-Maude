load ../../../src/probabilistic-model/dns
load ../../../src/probabilistic-model/sampler
load ../../../src/probabilistic-model/properties
load ../attacker

--- This is variant (b) of the NXNS attack, i.e., the victim are the name servers of a SLD.

mod TEST is
  inc SAMPLER + APMAUDE + DNS + PROPERTIES + ATTACKER .

  --- turn on name server resource bounds and resolver timeouts
  eq nsResourceBounds? = true .
  eq rsvTimeout? = true .

  --- turn off caching for better performance (each query is for a new name anyway)
  eq rsvCaching? = false .

  --- turn off detailed monitoring for better performance
  eq monitorQueryLog? = false .

  --- uncomment to enable MaxFetch(1) mitigation
  --- eq maxFetch? = true .
  eq maxFetchParam = 1 .

  op testTTL : -> Float .
  eq testTTL = 3600.0 . --- Note that this is in time units, not seconds

  ops mAddr cAddr rAddr rAddr1 atkrAddr : -> Address .

  --- "SBELT": fallback if there are no known name servers
  op sb : -> ZoneState .
  eq sb = < root ('a . 'root-servers . 'net . root |-> addrRoot) > .

  op cache : -> Cache .
  eq cache =
    cacheEntry(< 'attacker . 'com . root, ns, testTTL, 'ns . 'attacker . 'com . root >, 1)
    cacheEntry(< 'ns . 'attacker . 'com . root, a, testTTL, addrNSattacker >, 1)
    cacheEntry(< 'victim . 'com . root, ns, testTTL, 'ns . 'victim . 'com . root >, 1)
    cacheEntry(< 'ns . 'victim . 'com . root, a, testTTL, addrNSvictim >, 1) .

  ops addrRoot addrNScom addrNSvictim addrNSattacker : -> Address .

  ops zoneRoot zoneCom zoneVictim zoneAttacker : -> List{Record} .
  eq zoneRoot =
    --- authoritative data
    < root, soa, testTTL, soaData(testTTL) > --- dummy value
    < root, ns, testTTL, 'a . 'root-servers . 'net . root >

    --- non-authoritative data
    < 'a . 'root-servers . 'net . root, a, testTTL, addrRoot >
    < 'com . root, ns, testTTL, 'ns . 'com . root >
    < 'ns . 'com . root, a, testTTL, addrNScom > . --- glue

  eq zoneCom =
    --- authoritative data
    < 'com . root, soa, testTTL, soaData(testTTL) >
    < 'com . root, ns, testTTL, 'ns . 'com . 'root >
    < 'ns . 'com . root, a, testTTL, addrNScom >

    --- non-authoritative data
    < 'attacker . 'com . root, ns, testTTL, 'ns . 'attacker . 'com . root >
    < 'ns . 'attacker . 'com . root, a, testTTL, addrNSattacker > --- glue

    < 'victim . 'com . root, ns, testTTL, 'ns . 'victim . 'com . root >
    < 'ns . 'victim . 'com . root, a, testTTL, addrNSvictim > . --- glue

  eq zoneVictim =
    --- authoritative data
    < 'victim . 'com . root, soa, testTTL, soaData(testTTL) >
    < 'victim . 'com . root, ns, testTTL, 'ns . 'victim . 'com . root >
    < 'ns . 'victim . 'com . root, a, testTTL, addrNSvictim > .

  op initConfig : -> Config .
  eq initConfig = run(initState, limit) .

  eq initState = { 0.0 | nil }
    --- Preliminaries
    initMonitor(mAddr)
    [10.0 + atkrInitDelay, to cAddr : start, 0] --- start legitimate client (give attacker head start)

    --- Legitimate client
    < cAddr : Client | queries: genQueries(20, 'victim . 'com . root, 1, a, cAddr),
                       resolver: rAddr1,
                       notifyDone: atkrAddr >

    --- Resolver used by the legitimate client
    < rAddr1 : Resolver | cache: cache, --- assuming the attacker.com and victim.com name servers are cached
                          nxdomainCache: nilNxdomainCache,
                          nodataCache: nilNodataCache,
                          sbelt: sb,
                          workBudget: emptyIN,
                          blockedQueries: eptQSS,
                          sentQueries: eptQSS >

    --- Root name server
    < addrRoot : Nameserver | db: zoneRoot, queue: nilQueue >
    --- .com authoritative name server
    < addrNScom : Nameserver | db: zoneCom, queue: nilQueue >
    --- victim.com authoritative name server
    < addrNSvictim : Nameserver | db: zoneVictim, queue: nilQueue >

    --- Malicious client
    nxdomainClient(atkrAddr, 'attacker . 'com . root, 1, rAddr, 0.1)

    --- Resolver used by the attacker
    < rAddr : Resolver | cache: cache, --- assuming the attacker.com and victim.com name servers are cached
                         nxdomainCache: nilNxdomainCache,
                         nodataCache: nilNodataCache,
                         sbelt: sb,
                         workBudget: emptyIN,
                         blockedQueries: eptQSS,
                         sentQueries: eptQSS >

    --- attacker's authoritative name server
    maliciousNXNSNameserver(addrNSattacker, 'victim . 'com . root, 20, 1, testTTL) .

endm

--- uncomment for debugging purposes
--- set trace on .
set clear rules off .

set trace condition off . --- This does not seem to work
set trace whole off .
set trace substitution off .
set trace mb off .
set trace eq off .
set trace rl on . --- on
set trace select off .
set trace rewrite off .
set trace body off .
set trace builtin off .

--- rew initConfig .
--- rew numActorMsgsRecvd(addrNSvictim, initConfig) .
--- rew numActorMsgsSent(cAddr ; addrNSattacker, initConfig) .
--- rew msgAmpFactor(cAddr ; addrNSattacker, addrNSvictim, initConfig) .

rew clientQSuccessRatio(initConfig) .
rew clientQSuccessRatio(initConfig) .
rew clientQSuccessRatio(initConfig) .
rew clientQSuccessRatio(initConfig) .
rew clientQSuccessRatio(initConfig) .
