load ../../../src/probabilistic-model/dns
load ../../../src/probabilistic-model/sampler
load ../../../src/probabilistic-model/properties
load ../attacker

--- This is a combination of variant (b) of the NXNS attack and an attack based on QNAME minimization amplification.
--- The victim is an authoritative server for a SLD zone.
--- For the attack to work, the following requirements need to be met:
---  * The victim zone (a SLD) must contain a wildcard record of arbitrary type.
---  * The resolver must perform QNAME minimization even for internally generated queries to resolve name server
---    addresses.
---  * The resolver must be susceptible to an NXNS attack at least to some degree.

mod TEST is
  inc SAMPLER + APMAUDE + DNS + PROPERTIES + ATTACKER .

  eq rsvTimeout? = true .
  eq rsvTimeout = 1000.0 .

  --- Depending on the type for the wildcard record below, this setup can produce "ill-addressed" messages.
  --- We need to drop them.
  eq dropMsgsForNXActors? = true .

  --- uncomment to enable MaxFetch(1) mitigation
  --- eq maxFetch? = true .
  eq maxFetchParam = 1 .

  op testTTL : -> Float .
  eq testTTL = 3600.0 . --- Note that this is in time units, not seconds

  op q : -> Query .
  eq q = query(1, 'nxdomain . 'sd0 . 'attacker . 'com . root, a) .

  ops mAddr cAddr rAddr : -> Address .

  --- "SBELT": fallback if there are no known name servers
  op sb : -> ZoneState .
  eq sb = < root ('a . 'root-servers . 'net . root |-> addrRoot) > .

  op cache : -> Cache .
  eq cache =
    cacheEntry(< 'victim . 'com . root, ns, testTTL, 'ns . 'victim . 'com . root >, 1)
    cacheEntry(< 'ns . 'victim . 'com . root, a, testTTL, addrNSvictim >, 1) .

  ops addrRoot addrNScom addrNSvictim addrNSattacker addrUnresponsive : -> Address .

  ops zoneRoot zoneCom zoneVictim zoneAttacker : -> List{Record} .
  eq zoneRoot =
    --- authoritative data
    < root, soa, testTTL, soaData(testTTL) > --- dummy value
    < root, ns, testTTL, 'a . 'root-servers . 'net . root >

    --- non-authoritative data
    < 'a . 'root-servers . 'net . root, a, testTTL, addrRoot >
    < 'com . root, ns, testTTL, 'ns . 'com . root >
    < 'ns . 'com . root, a, testTTL, addrNScom > . --- glue

  eq zoneCom =
    --- authoritative data
    < 'com . root, soa, testTTL, soaData(testTTL) >
    < 'com . root, ns, testTTL, 'ns . 'com . 'root >
    < 'ns . 'com . root, a, testTTL, addrNScom >

    --- non-authoritative data
    < 'attacker . 'com . root, ns, testTTL, 'ns . 'attacker . 'com . root >
    < 'ns . 'attacker . 'com . root, a, testTTL, addrNSattacker > --- glue

    < 'victim . 'com . root, ns, testTTL, 'ns . 'victim . 'com . root >
    < 'ns . 'victim . 'com . root, a, testTTL, addrNSvictim > . --- glue

  eq zoneVictim =
    --- authoritative data
    < 'victim . 'com . root, soa, testTTL, soaData(testTTL) >
    < 'victim . 'com . root, ns, testTTL, 'ns . 'victim . 'com . root >
    < 'ns . 'victim . 'com . root, a, testTTL, addrNSvictim >
    --- A wildcard record of arbitrary type (note: if type is set to 'a', this produces ill-addressed messages that need
    --- to be dropped).
    < wildcard . 'victim . 'com . root, mx, testTTL, addrUnresponsive > .

  op initConfig : -> Config .
  eq initConfig = run(initState, limit) .

  eq initState = { 0.0 | nil }
    --- Preliminaries
    initMonitor(mAddr)
    [id, to cAddr : start, 0]

    < cAddr : Client | queries: q, resolver: rAddr, notifyDone: nullAddr >
    < rAddr : Resolver | cache: cache, --- assuming the victim.com name servers are cached
                         nxdomainCache: nilNxdomainCache,
                         nodataCache: nilNodataCache,
                         sbelt: sb,
                         workBudget: emptyIN,
                         blockedQueries: eptQSS,
                         sentQueries: eptQSS >

    --- Root name server
    < addrRoot : Nameserver | db: zoneRoot, queue: nilQueue >
    --- .com authoritative name server
    < addrNScom : Nameserver | db: zoneCom, queue: nilQueue >
    --- victim.com authoritative name server
    < addrNSvictim : Nameserver | db: zoneVictim, queue: nilQueue >
    
    --- Malicious name server, responding with fake delegations for sd0 pointing to a name (with many labels) under a
    --- wildcard record in the victim zone.
    --- The delegations then trigger a long sequence of QNAME minimization queries.
    --- The best number of labels depends on the parameters (query limits) for QNAME minimization.
    --- The best number of fake delegations then depends on the number of labels and the per-client-query work limit
    --- of the resolver and any NXNS countermeasures that are implemented.
    maliciousNXNSNameserver(addrNSattacker, 'victim . 'com . root, 10, 10, testTTL) .

endm

--- uncomment for debugging purposes
--- set trace on .

set trace condition off . --- This does not seem to work
set trace whole off .
set trace substitution off .
set trace mb off .
set trace eq off .
set trace rl on . --- on
set trace select off .
set trace rewrite off .
set trace body off .
set trace builtin off .

rew initConfig .
--- rew numActorMsgsRecvd(addrNSvictim, initConfig) .
--- rew numActorMsgsSent(cAddr ; addrNSattacker, initConfig) .
rew msgAmpFactor(cAddr ; addrNSattacker, addrNSvictim, initConfig) .
