load ../../src/probabilistic-model/dns
load ../../src/probabilistic-model/sampler
load ../../test/probabilistic-model/test_helpers
load ../../src/probabilistic-model/properties
load ../../attacker-models/probabilistic-model/attacker
--- This maude file has been created automatically from the Python representation.

mod TEST is

inc SAMPLER + APMAUDE + DNS + TEST-HELPERS + PROPERTIES + ATTACKER .

eq monitorQueryLog? = true .

eq configTsuNAMEslistCircDep = true .
eq rsvTimeout? = true .
eq rsvTimeout = 100.0 .
eq dropMsgsForNXActors? = true .
eq rsvMinCacheCredClient = 5 .
eq rsvMinCacheCredResolver = 5 .

--- Actor addresses
ops mAddr cAddr rAddr addrNSroot addrNScom addrNSnet addrNSexample addrNsAttacker1Com : -> Address .

--- "SBELT": fallback if there are no known name servers
op sb : -> ZoneState .
eq sb = < root ('a . 'root-servers . 'net . root |-> addrNSroot) > .

--- Zone files
op zoneExampleCom : -> List{Record} .
eq zoneExampleCom =
  < 'example . 'com . root, soa, 3600.0, soaData(3600.0) >
  < 'example . 'com . root, ns, 3600.0, 'ns . 'example . 'com . root >
  < 'ns . 'example . 'com . root, a, 3600.0, addrNSexample >
  < 'www . 'example . 'com . root, a, 3600.0, 1 . 2 . 3 . 4 >
  < wildcard . 'example . 'com . root, txt, 3600.0, nullAddr > .

op zoneCom : -> List{Record} .
eq zoneCom =
  < 'com . root, soa, 3600.0, soaData(3600.0) >
  < 'com . root, ns, 3600.0, 'ns . 'com . root >
  < 'ns . 'com . root, a, 3600.0, addrNScom >
  < 'example . 'com . root, ns, 3600.0, 'ns . 'example . 'com . root >
  < 'ns . 'example . 'com . root, a, 3600.0, addrNSexample >
  < 'attacker1 . 'com . root, ns, 3600.0, 'ns . 'attacker1 . 'com . root >
  < 'ns . 'attacker1 . 'com . root, a, 3600.0, addrNsAttacker1Com > .

op zone : -> List{Record} .
eq zone =
  < root, soa, 3600.0, soaData(3600.0) >
  < root, ns, 3600.0, 'a . 'root-servers . 'net . root >
  < 'a . 'root-servers . 'net . root, a, 3600.0, addrNSroot >
  < 'com . root, ns, 3600.0, 'ns . 'com . root >
  < 'ns . 'com . root, a, 3600.0, addrNScom >
  < 'net . root, ns, 3600.0, 'ns . 'net . root >
  < 'ns . 'net . root, a, 3600.0, addrNSnet > .

op zoneNet : -> List{Record} .
eq zoneNet =
  < 'net . root, soa, 3600.0, soaData(3600.0) >
  < 'net . root, ns, 3600.0, 'ns . 'net . root >
  < 'ns . 'net . root, a, 3600.0, addrNSnet >
  < 'root-servers . 'net . root, ns, 3600.0, 'a . 'root-servers . 'net . root >
  < 'a . 'root-servers . 'net . root, a, 3600.0, addrNSroot > .

op zoneRoot-serversNet : -> List{Record} .
eq zoneRoot-serversNet =
  < 'root-servers . 'net . root, soa, 3600.0, soaData(3600.0) >
  < 'root-servers . 'net . root, ns, 3600.0, 'a . 'root-servers . 'net . root >
  < 'a . 'root-servers . 'net . root, a, 3600.0, addrNSroot > .

op zoneAttacker1Com : -> List{Record} .
eq zoneAttacker1Com =
  < 'attacker1 . 'com . root, a, 3600.0, 1 . 2 . 3 . 4 >
  < 'attacker1 . 'com . root, soa, 3600.0, soaData(3600.0) >
  < 'attacker1 . 'com . root, ns, 3600.0, 'ns . 'attacker1 . 'com . root >

< 'c . 'attacker1 . 'com . root, cname, 3600.0, 'yy . 'c . 'attacker1 . 'com . root >
< 'yy . 'c . 'attacker1 . 'com . root, cname, 3600.0, 'rrrrrr . 'lllll . 'oooo . 'ppp . 'yy . 'c . 'attacker1 . 'com . root >
< 'ppp . 'yy . 'c . 'attacker1 . 'com . root, cname, 3600.0, 'kkkkkk . 'lllll . 'oooo . 'ppp . 'yy . 'c . 'attacker1 . 'com . root >
< 'oooo . 'ppp . 'yy . 'c . 'attacker1 . 'com . root, cname, 3600.0, 'ns . 'attacker1 . 'com . root >
< 'lllll . 'oooo . 'ppp . 'yy . 'c . 'attacker1 . 'com . root, cname, 3600.0, 'c . 'attacker1 . 'com . root >
< 'rrrrrr . 'lllll . 'oooo . 'ppp . 'yy . 'c . 'attacker1 . 'com . root, cname, 3600.0, 'ns . 'attacker1 . 'com . root >
< 'kkkkkk . 'lllll . 'oooo . 'ppp . 'yy . 'c . 'attacker1 . 'com . root, cname, 3600.0, 'yy . 'c . 'attacker1 . 'com . root >

  < 'ns . 'attacker1 . 'com . root, a, 3600.0, addrNsAttacker1Com > .

--- Initial configuration
op initConfig : -> Config .
eq initConfig = run(initState, limit) .

eq initState = { 0.0 | nil }
  --- Start messages
  [id, to cAddr : start, 0]
  --- Monitor
  initMonitor(mAddr)
  --- Clients
  < cAddr : Client |
    queries: query(1, 'ppp . 'yy . 'c . 'attacker1 . 'com . root, a),
    resolver: rAddr,
    notifyDone: nullAddr >
  --- Resolvers
  < rAddr : Resolver |
    cache: nilCache,
    nxdomainCache: nilNxdomainCache,
    nodataCache: nilNodataCache,
    sbelt: sb,
    workBudget: emptyIN,
    blockedQueries: eptQSS,
    sentQueries: eptQSS >
  --- Nameservers
  < addrNSroot : Nameserver |
    db: (zone zoneRoot-serversNet),
    queue: nilQueue >
  < addrNScom : Nameserver |
    db: (zoneCom),
    queue: nilQueue >
  < addrNSnet : Nameserver |
    db: (zoneNet),
    queue: nilQueue >
  < addrNSexample : Nameserver |
    db: (zoneExampleCom),
    queue: nilQueue >
  < addrNsAttacker1Com : DelayedNameserver |
    db: (zoneAttacker1Com),
    nsDelay: 50.0 >
  .

endm

--- rew initConfig .
rew maxQueryDuration(initConfig) .
