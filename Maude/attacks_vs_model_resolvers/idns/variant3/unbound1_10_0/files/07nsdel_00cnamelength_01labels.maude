load ../../../../../src/probabilistic-model/dns
load ../../../../../src/probabilistic-model/sampler
load ../../../../../src/probabilistic-model/properties
        	--- Created automatically with Python,
        	--- This file simulates the variant 3 of the iDNS attack. It consists
        	--- of an attacker nameserver that constantly sends multiple NS delegations
        	--- to the resolver, all these delegations are redirecting the resolver to
        	--- to the victim nameserver.
        	--- Attackers: client, attacker nameserver ; Victim : nameserver
        
mod TEST is
  inc SAMPLER + APMAUDE + DNS + PROPERTIES .

  eq rsvTimeout? = false .
  eq rsvTimeout = 1000.0 .

 	eq configWorkBudget = 5000 .

	--- enable CNAME validation 
	eq rsvMinCacheCredClient = 5 . 
	eq rsvMinCacheCredResolver = 5 .

         
        op q : -> Query .
      eq q = query(1, 'sub1 . 'attacker . 'com . root, a) .

      ops mAddr cAddr rAddr : -> Address .

      --- "SBELT": fallback if there are no known name servers
      op sb : -> ZoneState .
      eq sb = < root ('a . 'root-servers . 'net . root |-> addrRoot) > .

      op cache : -> Cache .
      eq cache =
        cacheEntry(< 'attacker . 'com . root, ns, testTTL, 'ns . 'attacker . 'com . root >, 1)
        cacheEntry(< 'ns . 'attacker . 'com . root, a, testTTL, addrNSattacker >, 1)
        cacheEntry(< 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >, 1)
        cacheEntry(< 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >, 1)
        .

      ops addrRoot addrNScom addrNSattacker addrNStargetANS : -> Address .

      ops zoneRoot zoneCom zoneAttacker zoneTarget : -> List{Record} .
      eq zoneRoot =
        --- authoritative data
        < root, soa, testTTL, soaData(testTTL) > --- dummy value
        < root, ns, testTTL, 'a . 'root-servers . 'net . root >

        --- non-authoritative data
        < 'a . 'root-servers . 'net . root, a, testTTL, addrRoot >
        < 'com . root, ns, testTTL, 'ns . 'com . root >
        < 'ns . 'com . root, a, testTTL, addrNScom > . --- glue

      eq zoneCom =
        --- authoritative data
        < 'com . root, soa, testTTL, soaData(testTTL) >
        < 'com . root, ns, testTTL, 'ns . 'com . 'root >
        < 'ns . 'com . root, a, testTTL, addrNScom >

        --- non-authoritative data
        < 'attacker . 'com . root, ns, testTTL, 'ns . 'attacker . 'com . root >
        < 'ns . 'attacker . 'com . root, a, testTTL, addrNSattacker > --- glue

        < 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
        < 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS > . --- glue
    
      eq zoneTarget =
        --- authoritative data
        < 'target-ans . 'com . root, soa, testTTL, soaData(testTTL) >
        < 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
        < 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >

        ---< wildcard . 'target-ans . 'com . root, mx, testTTL, nullAddr >
        . --- a wildcard record of arbitrary type
    
    eq zoneAttacker =
        --- authoritative data
        < 'attacker . 'com . root, soa, testTTL, soaData(testTTL) >
        < 'attacker . 'com . root, ns, testTTL, 'ns . 'attacker . 'com . root >
        < 'ns . 'attacker . 'com . root, a, testTTL, addrNSattacker >

        	--- Deep delegation
		< 'sub1 . 'attacker . 'com . root , ns, testTTL, 'sub2 . 'attacker . 'com . root >
		< 'sub1 . 'attacker . 'com . root , ns, testTTL, 'a0 . 'target-ans . 'com . root >
		< 'sub1 . 'attacker . 'com . root , ns, testTTL, 'a1 . 'target-ans . 'com . root >
		< 'sub1 . 'attacker . 'com . root , ns, testTTL, 'a2 . 'target-ans . 'com . root >
		< 'fake0 . 'sub2 . 'attacker . 'com . root , ns, testTTL, 'sub3 . 'attacker . 'com . root >
		< 'fake0 . 'sub2 . 'attacker . 'com . root , ns, testTTL, 'a3 . 'target-ans . 'com . root >
		< 'fake0 . 'sub2 . 'attacker . 'com . root , ns, testTTL, 'a4 . 'target-ans . 'com . root >
		< 'fake0 . 'sub2 . 'attacker . 'com . root , ns, testTTL, 'a5 . 'target-ans . 'com . root >
		< 'fake0 . 'sub3 . 'attacker . 'com . root , ns, testTTL, 'sub4 . 'attacker . 'com . root >
		< 'fake0 . 'sub3 . 'attacker . 'com . root , ns, testTTL, 'a6 . 'target-ans . 'com . root >
		< 'fake0 . 'sub3 . 'attacker . 'com . root , ns, testTTL, 'a7 . 'target-ans . 'com . root >
		< 'fake0 . 'sub3 . 'attacker . 'com . root , ns, testTTL, 'a8 . 'target-ans . 'com . root >
		< 'fake0 . 'sub4 . 'attacker . 'com . root , ns, testTTL, 'sub5 . 'attacker . 'com . root >
		< 'fake0 . 'sub4 . 'attacker . 'com . root , ns, testTTL, 'a9 . 'target-ans . 'com . root >
		< 'fake0 . 'sub4 . 'attacker . 'com . root , ns, testTTL, 'a10 . 'target-ans . 'com . root >
		< 'fake0 . 'sub4 . 'attacker . 'com . root , ns, testTTL, 'a11 . 'target-ans . 'com . root >
		< 'fake0 . 'sub5 . 'attacker . 'com . root , ns, testTTL, 'sub6 . 'attacker . 'com . root >
		< 'fake0 . 'sub5 . 'attacker . 'com . root , ns, testTTL, 'a12 . 'target-ans . 'com . root >
		< 'fake0 . 'sub5 . 'attacker . 'com . root , ns, testTTL, 'a13 . 'target-ans . 'com . root >
		< 'fake0 . 'sub5 . 'attacker . 'com . root , ns, testTTL, 'a14 . 'target-ans . 'com . root >
		< 'fake0 . 'sub6 . 'attacker . 'com . root , ns, testTTL, 'sub7 . 'attacker . 'com . root >
		< 'fake0 . 'sub6 . 'attacker . 'com . root , ns, testTTL, 'a15 . 'target-ans . 'com . root >
		< 'fake0 . 'sub6 . 'attacker . 'com . root , ns, testTTL, 'a16 . 'target-ans . 'com . root >
		< 'fake0 . 'sub6 . 'attacker . 'com . root , ns, testTTL, 'a17 . 'target-ans . 'com . root >
		< 'fake0 . 'sub7 . 'attacker . 'com . root , ns, testTTL, 'sub8 . 'attacker . 'com . root >
		< 'fake0 . 'sub7 . 'attacker . 'com . root , ns, testTTL, 'a18 . 'target-ans . 'com . root >
		< 'fake0 . 'sub7 . 'attacker . 'com . root , ns, testTTL, 'a19 . 'target-ans . 'com . root >
		< 'fake0 . 'sub7 . 'attacker . 'com . root , ns, testTTL, 'a20 . 'target-ans . 'com . root >

        .


        
          op initConfig : -> Config .
          eq initConfig = run(initState, limit) .

          eq initState = { 0.0 | nil }
            --- Preliminaries
            initMonitor(mAddr)
            [id, to cAddr : start, 0]

            < cAddr : Client | queries: q, resolver: rAddr, notifyDone: nullAddr >
            < rAddr : Resolver | cache: cache,
                                 nxdomainCache: nilNxdomainCache,
                                 nodataCache: nilNodataCache,
                                 sbelt: sb,
                                 workBudget: emptyIN,
                                 blockedQueries: eptQSS,
                                 sentQueries: eptQSS >

            --- Root name server
            < addrRoot : Nameserver | db: zoneRoot, queue: nilQueue >
            --- .com authoritative name server
            < addrNScom : Nameserver | db: zoneCom, queue: nilQueue >
            --- attacker authoritative name server
            < addrNSattacker : Nameserver | db: zoneAttacker, queue: nilQueue >
            --- target authoritative name server
            < addrNStargetANS : Nameserver | db: zoneTarget, queue: nilQueue > .

        endm

        --- uncomment for debugging purposes
        --- set trace on .

        set trace condition off . --- This does not seem to work
        set trace whole off .
        set trace substitution off .
        set trace mb off .
        set trace eq off .
        set trace rl on . --- on
        set trace select off .
        set trace rewrite off .
        set trace body off .
        set trace builtin off .
        
        rew initConfig .
        rew numActorMsgsRecvd(addrNStargetANS, initConfig) .
        ---rew msgAmpFactorTerminal(cAddr, rAddr, initConfig) .
        ---rew msgAmpFactor(cAddr,  addrNStargetANS, initConfig) .
        --- rew msgAmpFactor(cAddr ; addrNSattacker, rAddr, initConfig) .
        --- rew numActorMsgsRecvdTerminal(rAddr, initConfig) .
        --- rew numActorMsgsSentTerminal(cAddr ; addrNSattacker, initConfig) .
        ---rew msgAmpFactorTerminal(cAddr, rAddr, initConfig) .

        --- rew msgAmpFactor(cAddr, rAddr, initConfig) .
        --- rew msgAmpFactor(cAddr, addrNStargetANS, initConfig) .

        --- rew msgAmpFactor(cAddr, addrNSintermediary, initConfig) .

        --- rew msgAmpFactor(cAddr ; addrNStargetANS ; addrNSintermediary ; addrNScom, rAddr, initConfig) .
        --- rew numActorMsgsRecvd(rAddr, initConfig) .

        --- rew msgAmpFactor(cAddr, addrNStargetANS ; addrNSintermediary ; addrNScom, initConfig) .
        --- rew msgAmpFactor(cAddr, addrNSintermediary, initConfig) .
        