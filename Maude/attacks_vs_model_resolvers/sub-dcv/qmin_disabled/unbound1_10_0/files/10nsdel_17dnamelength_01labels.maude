load ../../../../../src/probabilistic-model/dns
load ../../../../../src/probabilistic-model/sampler
load ../../../../../src/probabilistic-model/properties
        
--- Created automatically with Python.
--- This file simulates the Subqueries+Dname chain validation attack. It consists
--- of attacker client which queries the first element of each Dname chains contained into then
--- target nameserver. The attacker managed to install some records in
--- this victim nameserver, which trigger a long DNAME chain between the nameserver and
--- the resolver. This is using the DNAME chain validation.
--- Attacker: client ; Victim : nameserver
        
mod TEST is
  inc SAMPLER + APMAUDE + DNS + PROPERTIES .

  eq rsvTimeout? = false .
  eq rsvTimeout = 1000.0 .

 	eq configWorkBudget = 5000 .

	--- enable CNAME validation 
	eq rsvMinCacheCredClient = 5 . 
	eq rsvMinCacheCredResolver = 5 .


         
--- Deactivate QMIN
eq maxMinimiseCount = 0 .


  op testTTL : -> Float .
  eq testTTL = 3600.0 .

  op q : -> Query .
  eq q = query(1, 'del . 'intermediary . 'com . root, a) .


  ops mAddr cAddr rAddr : -> Address .

  --- "SBELT": fallback if there are no known name servers
  op sb : -> ZoneState .
  eq sb = < root ('a . 'root-servers . 'net . root |-> addrRoot) > .

  ops addrRoot addrNScom addrNStargetANS addrNSintermediary : -> Address .

  op cache : -> Cache .
  eq cache =
    cacheEntry(< 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >, 1)
    cacheEntry(< 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >, 1)
    cacheEntry(< 'intermediary . 'com . root, ns, testTTL, 'ns . 'intermediary . 'com . root >, 1)
    cacheEntry(< 'ns . 'intermediary . 'com . root, a, testTTL, addrNSintermediary >, 1) .


  ops zoneRoot zoneCom zoneTargetANS zoneIntermediary : -> List{Record} .

  eq zoneRoot =
    --- authoritative data
    < root, soa, testTTL, soaData(testTTL) > --- dummy value
    < root, ns, testTTL, 'a . 'root-servers . 'net . root >

    --- non-authoritative data
    < 'a . 'root-servers . 'net . root, a, testTTL, addrRoot >
    < 'com . root, ns, testTTL, 'ns . 'com . root >
    < 'ns . 'com . root, a, testTTL, addrNScom > . --- glue

  eq zoneCom =
    --- authoritative data
    < 'com . root, soa, testTTL, soaData(testTTL) >
    < 'com . root, ns, testTTL, 'ns . 'com . 'root >
    < 'ns . 'com . root, a, testTTL, addrNScom >

    --- non-authoritative data
    < 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
    < 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >  --- glue
    < 'intermediary . 'com . root, ns, testTTL, 'ns . 'intermediary . 'com . root >
    < 'ns . 'intermediary . 'com . root, a, testTTL, addrNSintermediary > . --- glue

  eq zoneTargetANS =
    --- authoritative data
    < 'target-ans . 'com . root, soa, testTTL, soaData(testTTL) >
    < 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
    < 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >

    

		<  'a1 . 'target-ans . 'com . root , dname, testTTL, 'b1 . 'target-ans . 'com . root >
		< 'b1 . 'target-ans . 'com . root , dname, testTTL, 'c1 . 'target-ans . 'com . root >
		< 'c1 . 'target-ans . 'com . root , dname, testTTL, 'd1 . 'target-ans . 'com . root >
		< 'd1 . 'target-ans . 'com . root , dname, testTTL, 'e1 . 'target-ans . 'com . root >
		< 'e1 . 'target-ans . 'com . root , dname, testTTL, 'f1 . 'target-ans . 'com . root >
		< 'f1 . 'target-ans . 'com . root , dname, testTTL, 'g1 . 'target-ans . 'com . root >
		< 'g1 . 'target-ans . 'com . root , dname, testTTL, 'h1 . 'target-ans . 'com . root >
		< 'h1 . 'target-ans . 'com . root , dname, testTTL, 'i1 . 'target-ans . 'com . root >


		<  'a2 . 'target-ans . 'com . root , dname, testTTL, 'b2 . 'target-ans . 'com . root >
		< 'b2 . 'target-ans . 'com . root , dname, testTTL, 'c2 . 'target-ans . 'com . root >
		< 'c2 . 'target-ans . 'com . root , dname, testTTL, 'd2 . 'target-ans . 'com . root >
		< 'd2 . 'target-ans . 'com . root , dname, testTTL, 'e2 . 'target-ans . 'com . root >
		< 'e2 . 'target-ans . 'com . root , dname, testTTL, 'f2 . 'target-ans . 'com . root >
		< 'f2 . 'target-ans . 'com . root , dname, testTTL, 'g2 . 'target-ans . 'com . root >
		< 'g2 . 'target-ans . 'com . root , dname, testTTL, 'h2 . 'target-ans . 'com . root >
		< 'h2 . 'target-ans . 'com . root , dname, testTTL, 'i2 . 'target-ans . 'com . root >


		<  'a3 . 'target-ans . 'com . root , dname, testTTL, 'b3 . 'target-ans . 'com . root >
		< 'b3 . 'target-ans . 'com . root , dname, testTTL, 'c3 . 'target-ans . 'com . root >
		< 'c3 . 'target-ans . 'com . root , dname, testTTL, 'd3 . 'target-ans . 'com . root >
		< 'd3 . 'target-ans . 'com . root , dname, testTTL, 'e3 . 'target-ans . 'com . root >
		< 'e3 . 'target-ans . 'com . root , dname, testTTL, 'f3 . 'target-ans . 'com . root >
		< 'f3 . 'target-ans . 'com . root , dname, testTTL, 'g3 . 'target-ans . 'com . root >
		< 'g3 . 'target-ans . 'com . root , dname, testTTL, 'h3 . 'target-ans . 'com . root >
		< 'h3 . 'target-ans . 'com . root , dname, testTTL, 'i3 . 'target-ans . 'com . root >


		<  'a4 . 'target-ans . 'com . root , dname, testTTL, 'b4 . 'target-ans . 'com . root >
		< 'b4 . 'target-ans . 'com . root , dname, testTTL, 'c4 . 'target-ans . 'com . root >
		< 'c4 . 'target-ans . 'com . root , dname, testTTL, 'd4 . 'target-ans . 'com . root >
		< 'd4 . 'target-ans . 'com . root , dname, testTTL, 'e4 . 'target-ans . 'com . root >
		< 'e4 . 'target-ans . 'com . root , dname, testTTL, 'f4 . 'target-ans . 'com . root >
		< 'f4 . 'target-ans . 'com . root , dname, testTTL, 'g4 . 'target-ans . 'com . root >
		< 'g4 . 'target-ans . 'com . root , dname, testTTL, 'h4 . 'target-ans . 'com . root >
		< 'h4 . 'target-ans . 'com . root , dname, testTTL, 'i4 . 'target-ans . 'com . root >


		<  'a5 . 'target-ans . 'com . root , dname, testTTL, 'b5 . 'target-ans . 'com . root >
		< 'b5 . 'target-ans . 'com . root , dname, testTTL, 'c5 . 'target-ans . 'com . root >
		< 'c5 . 'target-ans . 'com . root , dname, testTTL, 'd5 . 'target-ans . 'com . root >
		< 'd5 . 'target-ans . 'com . root , dname, testTTL, 'e5 . 'target-ans . 'com . root >
		< 'e5 . 'target-ans . 'com . root , dname, testTTL, 'f5 . 'target-ans . 'com . root >
		< 'f5 . 'target-ans . 'com . root , dname, testTTL, 'g5 . 'target-ans . 'com . root >
		< 'g5 . 'target-ans . 'com . root , dname, testTTL, 'h5 . 'target-ans . 'com . root >
		< 'h5 . 'target-ans . 'com . root , dname, testTTL, 'i5 . 'target-ans . 'com . root >


		<  'a6 . 'target-ans . 'com . root , dname, testTTL, 'b6 . 'target-ans . 'com . root >
		< 'b6 . 'target-ans . 'com . root , dname, testTTL, 'c6 . 'target-ans . 'com . root >
		< 'c6 . 'target-ans . 'com . root , dname, testTTL, 'd6 . 'target-ans . 'com . root >
		< 'd6 . 'target-ans . 'com . root , dname, testTTL, 'e6 . 'target-ans . 'com . root >
		< 'e6 . 'target-ans . 'com . root , dname, testTTL, 'f6 . 'target-ans . 'com . root >
		< 'f6 . 'target-ans . 'com . root , dname, testTTL, 'g6 . 'target-ans . 'com . root >
		< 'g6 . 'target-ans . 'com . root , dname, testTTL, 'h6 . 'target-ans . 'com . root >
		< 'h6 . 'target-ans . 'com . root , dname, testTTL, 'i6 . 'target-ans . 'com . root >


		<  'a7 . 'target-ans . 'com . root , dname, testTTL, 'b7 . 'target-ans . 'com . root >
		< 'b7 . 'target-ans . 'com . root , dname, testTTL, 'c7 . 'target-ans . 'com . root >
		< 'c7 . 'target-ans . 'com . root , dname, testTTL, 'd7 . 'target-ans . 'com . root >
		< 'd7 . 'target-ans . 'com . root , dname, testTTL, 'e7 . 'target-ans . 'com . root >
		< 'e7 . 'target-ans . 'com . root , dname, testTTL, 'f7 . 'target-ans . 'com . root >
		< 'f7 . 'target-ans . 'com . root , dname, testTTL, 'g7 . 'target-ans . 'com . root >
		< 'g7 . 'target-ans . 'com . root , dname, testTTL, 'h7 . 'target-ans . 'com . root >
		< 'h7 . 'target-ans . 'com . root , dname, testTTL, 'i7 . 'target-ans . 'com . root >


		<  'a8 . 'target-ans . 'com . root , dname, testTTL, 'b8 . 'target-ans . 'com . root >
		< 'b8 . 'target-ans . 'com . root , dname, testTTL, 'c8 . 'target-ans . 'com . root >
		< 'c8 . 'target-ans . 'com . root , dname, testTTL, 'd8 . 'target-ans . 'com . root >
		< 'd8 . 'target-ans . 'com . root , dname, testTTL, 'e8 . 'target-ans . 'com . root >
		< 'e8 . 'target-ans . 'com . root , dname, testTTL, 'f8 . 'target-ans . 'com . root >
		< 'f8 . 'target-ans . 'com . root , dname, testTTL, 'g8 . 'target-ans . 'com . root >
		< 'g8 . 'target-ans . 'com . root , dname, testTTL, 'h8 . 'target-ans . 'com . root >
		< 'h8 . 'target-ans . 'com . root , dname, testTTL, 'i8 . 'target-ans . 'com . root >


		<  'a9 . 'target-ans . 'com . root , dname, testTTL, 'b9 . 'target-ans . 'com . root >
		< 'b9 . 'target-ans . 'com . root , dname, testTTL, 'c9 . 'target-ans . 'com . root >
		< 'c9 . 'target-ans . 'com . root , dname, testTTL, 'd9 . 'target-ans . 'com . root >
		< 'd9 . 'target-ans . 'com . root , dname, testTTL, 'e9 . 'target-ans . 'com . root >
		< 'e9 . 'target-ans . 'com . root , dname, testTTL, 'f9 . 'target-ans . 'com . root >
		< 'f9 . 'target-ans . 'com . root , dname, testTTL, 'g9 . 'target-ans . 'com . root >
		< 'g9 . 'target-ans . 'com . root , dname, testTTL, 'h9 . 'target-ans . 'com . root >
		< 'h9 . 'target-ans . 'com . root , dname, testTTL, 'i9 . 'target-ans . 'com . root >


		<  'a10 . 'target-ans . 'com . root , dname, testTTL, 'b10 . 'target-ans . 'com . root >
		< 'b10 . 'target-ans . 'com . root , dname, testTTL, 'c0 . 'target-ans . 'com . root >
		< 'c0 . 'target-ans . 'com . root , dname, testTTL, 'd0 . 'target-ans . 'com . root >
		< 'd0 . 'target-ans . 'com . root , dname, testTTL, 'e0 . 'target-ans . 'com . root >
		< 'e0 . 'target-ans . 'com . root , dname, testTTL, 'f0 . 'target-ans . 'com . root >
		< 'f0 . 'target-ans . 'com . root , dname, testTTL, 'g0 . 'target-ans . 'com . root >
		< 'g0 . 'target-ans . 'com . root , dname, testTTL, 'h0 . 'target-ans . 'com . root >
		< 'h0 . 'target-ans . 'com . root , dname, testTTL, 'i0 . 'target-ans . 'com . root >

    .

  eq zoneIntermediary =
    --- authoritative data
    < 'intermediary . 'com . root, soa, testTTL, soaData(testTTL) >
    < 'intermediary . 'com . root, ns, testTTL, 'ns . 'intermediary . 'com . root >
    < 'ns . 'intermediary . 'com . root, a, testTTL, addrNSintermediary >

    	--- Malicious delegation
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a1 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a2 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a3 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a4 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a5 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a6 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a7 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a8 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a9 . 'target-ans . 'com . root >
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a10 . 'target-ans . 'com . root >

    .


  op initConfig : -> Config .
  eq initConfig = run(initState, limit) .

  eq initState = { 0.0 | nil }
    --- Preliminaries
    initMonitor(mAddr)
    [id, to cAddr : start, 0]

    < cAddr : Client | queries: q, resolver: rAddr, notifyDone: nullAddr >
    < rAddr : Resolver | cache: cache,
                         nxdomainCache: nilNxdomainCache,
                         nodataCache: nilNodataCache,
                         sbelt: sb,
                         workBudget: emptyIN,
                         blockedQueries: eptQSS,
                         sentQueries: eptQSS >

    --- Root name server
    < addrRoot : Nameserver | db: zoneRoot, queue: nilQueue >
    --- .com authoritative name server
    < addrNScom : Nameserver | db: zoneCom, queue: nilQueue >
    --- attacker authoritative name server
    < addrNStargetANS : Nameserver | db: zoneTargetANS, queue: nilQueue >
    --- intermediary.com authoritative name server
    < addrNSintermediary : Nameserver | db: zoneIntermediary, queue: nilQueue > .

endm

--- uncomment for debugging purposes
--- set trace on .

set trace condition off . --- This does not seem to work
set trace whole off .
set trace substitution off .
set trace mb off .
set trace eq off .
set trace rl on . --- on
set trace select off .
set trace rewrite off .
set trace body off .
set trace builtin off .

rew initConfig .
rew numActorMsgsRecvd(addrNStargetANS, initConfig) .
        