load ../../../../../src/probabilistic-model/dns
load ../../../../../src/probabilistic-model/sampler
load ../../../../../src/probabilistic-model/properties
        load ../../../../../attacker-models/probabilistic-model/attacker
--- Created automatically with Python.
--- This file simulates the Subqueries+Dname chain validation +delay (slow) attack. It consists
--- of attacker client which queries the first element of each Dname chains contained into then
--- target nameserver. The attacker managed to install some records in
--- this victim nameserver, which trigger a long DNAME chain between the nameserver and
--- the resolver. This is using the DNAME chain validation. The target delays
--- each of its response by a certain delay -> increasing the total time the query
--- is 'alive'.
--- Attacker: client ; Victim : nameserver
        

mod TEST is
  inc SAMPLER + APMAUDE + DNS + PROPERTIES + ATTACKER .

  eq rsvTimeout? = false .
  eq rsvTimeout = 1000.0 .

  --- nameserver delay
  op testNsDelay : -> Float .
  eq testNsDelay =  400.0 . 
	eq configWorkBudget = 5000 .

	--- enable CNAME validation 
	eq rsvMinCacheCredClient = 5 . 
	eq rsvMinCacheCredResolver = 5 .


                 


op testTTL : -> Float .
eq testTTL = 36000.0 .

op q : -> Query .
eq q = query(1, 'sub . 'a1 . 'target-ans . 'com . root , a) .

ops mAddr cAddr rAddr : -> Address .

--- "SBELT": fallback if there are no known name servers
op sb : -> ZoneState .
eq sb = < root ('a  . 'root-servers . 'net . root |-> addrRoot) > .

ops addrRoot addrNScom addrNStargetANS addrNSintermediary : -> Address .

op cache : -> Cache .
eq cache =
cacheEntry(< 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >, 1)
cacheEntry(< 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >, 1)
cacheEntry(< 'intermediary . 'com . root, ns, testTTL, 'ns . 'intermediary . 'com . root >, 1)
cacheEntry(< 'ns . 'intermediary . 'com . root, a, testTTL, addrNSintermediary >, 1) .


ops zoneRoot zoneCom zoneTargetANS zoneIntermediary : -> List{Record} .

eq zoneRoot =
--- authoritative data
< root, soa, testTTL, soaData(testTTL) > --- dummy value
< root, ns, testTTL, 'a . 'root-servers . 'net . root >

--- non-authoritative data
< 'a . 'root-servers . 'net . root, a, testTTL, addrRoot >
< 'com . root, ns, testTTL, 'ns . 'com . root >
< 'ns . 'com . root, a, testTTL, addrNScom > . --- glue

eq zoneCom =
--- authoritative data
< 'com . root, soa, testTTL, soaData(testTTL) >
< 'com . root, ns, testTTL, 'ns . 'com . 'root >
< 'ns . 'com . root, a, testTTL, addrNScom >

--- non-authoritative data
< 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
< 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >  --- glue
< 'intermediary . 'com . root, ns, testTTL, 'ns . 'intermediary . 'com . root >
< 'ns . 'intermediary . 'com . root, a, testTTL, addrNSintermediary > . --- glue

eq zoneTargetANS =
--- authoritative data
< 'target-ans . 'com . root, soa, testTTL, soaData(testTTL) >
< 'target-ans . 'com . root, ns, testTTL, 'ns . 'target-ans . 'com . root >
< 'ns . 'target-ans . 'com . root, a, testTTL, addrNStargetANS >



		<  'a1 . 'target-ans . 'com . root , dname, testTTL, 'ba1 . 'target-ans . 'com . root >
		< 'ba1 . 'target-ans . 'com . root , dname, testTTL, 'ca1 . 'target-ans . 'com . root >
		< 'ca1 . 'target-ans . 'com . root , dname, testTTL, 'da1 . 'target-ans . 'com . root >
		< 'da1 . 'target-ans . 'com . root , dname, testTTL, 'ea1 . 'target-ans . 'com . root >
		< 'ea1 . 'target-ans . 'com . root , dname, testTTL, 'fa1 . 'target-ans . 'com . root >
		< 'fa1 . 'target-ans . 'com . root , dname, testTTL, 'ga1 . 'target-ans . 'com . root >
		< 'ga1 . 'target-ans . 'com . root , dname, testTTL, 'ha1 . 'target-ans . 'com . root >
		< 'ha1 . 'target-ans . 'com . root , dname, testTTL, 'ia1 . 'target-ans . 'com . root >
		< 'ia1 . 'target-ans . 'com . root , dname, testTTL, 'ja1 . 'target-ans . 'com . root >
		< 'ja1 . 'target-ans . 'com . root , dname, testTTL, 'ka1 . 'target-ans . 'com . root >
		< 'ka1 . 'target-ans . 'com . root , dname, testTTL, 'la1 . 'target-ans . 'com . root >
		< 'la1 . 'target-ans . 'com . root , dname, testTTL, 'ma1 . 'target-ans . 'com . root >
		< 'ma1 . 'target-ans . 'com . root , dname, testTTL, 'na1 . 'target-ans . 'com . root >
		< 'na1 . 'target-ans . 'com . root , dname, testTTL, 'oa1 . 'target-ans . 'com . root >
		< 'oa1 . 'target-ans . 'com . root , dname, testTTL, 'pa1 . 'target-ans . 'com . root >
		< 'pa1 . 'target-ans . 'com . root , dname, testTTL, 'qa1 . 'target-ans . 'com . root >

.

eq zoneIntermediary =
--- authoritative data
< 'intermediary . 'com . root, soa, testTTL, soaData(testTTL) >
< 'intermediary . 'com . root, ns, testTTL, 'ns . 'intermediary . 'com . root >
< 'ns . 'intermediary . 'com . root, a, testTTL, addrNSintermediary >

	--- Malicious delegation
		< 'del . 'intermediary . 'com . root, ns, testTTL, 'sub .  'a1 . 'target-ans . 'com . root >

.

  op initConfig : -> Config .
  eq initConfig = run(initState, limit) .

  eq initState = { 0.0 | nil }
    --- Preliminaries
    initMonitor(mAddr)
    [id, to cAddr : start, 0]

    < cAddr : Client | queries: q, resolver: rAddr, notifyDone: nullAddr >
    < rAddr : Resolver | cache: cache,
                         nxdomainCache: nilNxdomainCache,
                         nodataCache: nilNodataCache,
                         sbelt: sb,
                         workBudget: emptyIN,
                         blockedQueries: eptQSS,
                         sentQueries: eptQSS >

    --- Root name server
    < addrRoot : Nameserver | db: zoneRoot, queue: nilQueue >
    --- .com authoritative name server
    < addrNScom : Nameserver | db: zoneCom, queue: nilQueue >
    --- target authoritative name server
    < addrNStargetANS : DelayedNameserver | db: zoneTargetANS, nsDelay: testNsDelay, queue: nilQueue >
    --- intermediary.com authoritative name server
    < addrNSintermediary : Nameserver | db: zoneIntermediary, queue: nilQueue >
    .

endm

--- uncomment for debugging purposes
--- set trace on .

set trace condition off . --- This does not seem to work
set trace whole off .
set trace substitution off .
set trace mb off .
set trace eq off .
set trace rl on . --- on
set trace select off .
set trace rewrite off .
set trace body off .
set trace builtin off .
        
rew initConfig .
rew avgQueryDuration(initConfig) .
--- rew maxQueryDuration(initConfig) .
--- rew numActorMsgsRecvd(addrNStargetANS, initConfig) .
        